/*
    BOJ1700_멀티탭_스케줄링
    --------------------------------------------------------------------------------------------------------------------
    문제

    기숙사에서 살고 있는 준규는 한 개의 멀티탭을 이용하고 있다. 준규는 키보드, 헤어드라이기, 핸드폰 충전기, 디지털 카메라 충전기 등
    여러 개의 전기용품을 사용하면서 어쩔 수 없이 각종 전기용품의 플러그를 뺐다 꽂았다 하는 불편함을 겪고 있다.
    그래서 준규는 자신의 생활 패턴을 분석하여, 자기가 사용하고 있는 전기용품의 사용순서를 알아내었고,
    이를 기반으로 플러그를 빼는 횟수를 최소화하는 방법을 고안하여 보다 쾌적한 생활환경을 만들려고 한다.

    예를 들어 3 구(구멍이 세 개 달린) 멀티탭을 쓸 때, 전기용품의 사용 순서가 아래와 같이 주어진다면,

    키보드
    헤어드라이기
    핸드폰 충전기
    디지털 카메라 충전기
    키보드
    헤어드라이기
    키보드, 헤어드라이기, 핸드폰 충전기의 플러그를 순서대로 멀티탭에 꽂은 다음 디지털 카메라 충전기 플러그를 꽂기 전에
    핸드폰충전기 플러그를 빼는 것이 최적일 것이므로 플러그는 한 번만 빼면 된다.
    --------------------------------------------------------------------------------------------------------------------
    입력

    첫 줄에는 멀티탭 구멍의 개수 N (1 ≤ N ≤ 100)과 전기 용품의 총 사용횟수 K (1 ≤ K ≤ 100)가 정수로 주어진다.
    두 번째 줄에는 전기용품의 이름이 K 이하의 자연수로 사용 순서대로 주어진다. 각 줄의 모든 정수 사이는 공백문자로 구분되어 있다.
    --------------------------------------------------------------------------------------------------------------------
    출력

    하나씩 플러그를 빼는 최소의 횟수를 출력하시오.
    --------------------------------------------------------------------------------------------------------------------
    예제 입력 1

    2 7
    2 3 2 3 1 2 7
    --------------------------------------------------------------------------------------------------------------------
    예제 출력 1

    2
    --------------------------------------------------------------------------------------------------------------------
    풀이

    여러가지 예제를 만들다 보니 최선의 선택을 하는 방법을 알아냄
    처음에는 빈도수가 적은것을 우선순위로 하였으나 안된다는것을 알고 다른 방법을 생각해냈다.
    여러 예제들을 만들어 돌린결과는 이러하다. (우선순위 순으로)

    콘센트에 꼽아야 하는 순서대로 꽂는 행위를 하였을때
    1) 현재 콘센트가 비어있는곳
    2) 현재 꼽아야 하는 기기가 이미 꼽혀져 있는 곳 (콘센트에 기기를 뺄 필요가 없음)
    3) 콘센트에 꼽혀져 있는 기기중, 가장 나중에 다시 기기의 순이 돌아오는 곳(혹은 이미 사용을 모두 하여 더이상 꽂을 필요가없는 기기)

    코드상으로는 콘센트가 앞에서부터 채워지며 처음 모두 채워진 이후로는 비워지는 경우가 없기 때문에 비어있는 곳과 이미 콘센트에
    존재하는 기기가 있는 곳 (1번, 2번) 의 경우를 동시에 검사하여 반복문을 빠져 나와도 무방하다.

    3번 조건은 두 조건중 충족되는 조건 아무거나 적용하면 된다.
    가장 나중에 다시 기기가 등장하는 경우는 남은 arr 의 순번을 탐색해야 하기 때문에 남은 빈도수를 계속 갱신하여 빈도수가 0이 되는
    경우를 바로 찾은 경우에는 그 경우를 우선순위로 정하여 반복문을 최대한 줄였다.

    --------------------------------------------------------------------------------------------------------------------
 */
package greedy;

import java.io.*;
import java.util.*;

public class BOJ1700_멀티탭_스케줄링 {
    static int N, K;
    static int[] arr, tap, cnt;

    public static void main(String[] args) throws IOException {
        inputAndSettingData();
        solve();
    }

    static void solve() {
        int ans = 0;
        for (int i = 0; i < K; i++) {
            boolean emptyOrSame = false;
            boolean cntZero = false;
            int injectionIdx = -1;
            int maxAgainArrIdx = -1;
            for (int t = 0; t < N; t++) {
                if (tap[t] == 0 || arr[i] == tap[t]) {
                    emptyOrSame = true;
                    injectionIdx = t;
                    break;
                }
                if (cnt[tap[t]] == 0) {
                    cntZero = true;
                    injectionIdx = t;
                }

                if (cntZero) continue;
                for (int a = i + 1; a < K; a++) {
                    if (tap[t] == arr[a]) {
                        if (maxAgainArrIdx < a) {
                            maxAgainArrIdx = a;
                            injectionIdx = t;
                        }
                        break;
                    }
                }
            }
            cnt[arr[i]]--;
            tap[injectionIdx] = arr[i];
            if (!emptyOrSame) ans++;
        }
        System.out.println(ans);
    }

    static void inputAndSettingData() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        arr = new int[K];
        tap = new int[N];
        cnt = new int[101];
        for (int i = 0; i < K; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
            cnt[arr[i]]++;
        }
    }
}
